// Send logs to Loki
loki.write "default" {
  endpoint {
    url = "{{ loki_endpoint }}"
  }
}


// Collect logs from systemd journal for node_exporter integration
loki.source.journal "logs_integrations_integrations_node_exporter_journal_scrape" {
  // Only collect logs from the last 24 hours
  max_age       = "24h0m0s"

  // Apply relabeling rules to the logs
  relabel_rules = discovery.relabel.logs_integrations_integrations_node_exporter_journal_scrape.rules

  // Send logs to the local Loki instance
  forward_to    = [loki.write.default.receiver]
}


local.file_match "logs_integrations_integrations_node_exporter_direct_scrape" {
  path_targets = [{
    // Target localhost for log collection
    __address__ = "localhost",

    // Collect standard system logs
    __path__    = "/var/log/{syslog,messages,*.log}",

    // Add instance label with hostname
    instance    = constants.hostname,

    // Add job label for logs
    job         = "integrations/node_exporter",
  }]
}

// Define relabeling rules for systemd journal logs
discovery.relabel "logs_integrations_integrations_node_exporter_journal_scrape" {
  targets = []

  rule {
    // Extract systemd unit information into a label
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }

  rule {
    // Extract boot ID information into a label
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
  }

  rule {
    // Extract transport information into a label
    source_labels = ["__journal__transport"]
    target_label  = "transport"
  }

  rule {
    // Extract log priority into a level label
    source_labels = ["__journal_priority_keyword"]
    target_label  = "level"
  }
}


// Collect logs from files for node_exporter
loki.source.file "logs_integrations_integrations_node_exporter_direct_scrape" {
  // Use targets defined in local.file_match
  targets    = local.file_match.logs_integrations_integrations_node_exporter_direct_scrape.targets

  // Send logs to the local Loki instance
  forward_to = [loki.write.default.receiver]
}

{% if 'nomad_clients' in group_names %}
// Fetch Nomad alloc 
// https://github.com/grafana/alloy/issues/3584
local.file_match "logs_integrations_integrations_alloc_exporter_direct_scrape" {
  path_targets = [
    {
      __address__       = "localhost",
      __path__          = "/opt/nomad/data/alloc/*/alloc/logs/*.stdout.*", 
      __path_exclude__  = "/opt/nomad/data/alloc/**/*.fifo"
      instance          = constants.hostname,
      stream            = "stdout"
      job               = "integrations/alloc_exporter",

    },
    {
      __address__       = "localhost",
      __path__          = "/opt/nomad/data/alloc/*/alloc/logs/*.stderr.*", 
      __path_exclude__  = "/opt/nomad/data/alloc/**/*.fifo"
      instance          = constants.hostname,
      stream            = "stderr"
      job               = "integrations/alloc_exporter",
    },
  ]
}

loki.source.file "logs_integrations_integrations_alloc_exporter_direct_scrape" {
  targets   = local.file_match.logs_integrations_integrations_alloc_exporter_direct_scrape.targets
  forward_to = [loki.write.default.receiver]
}

//------
// discovery.file "nomad_alloc_logs" {
//   paths = [
//     "/opt/nomad/data/alloc/*/alloc/logs/*.stdout.*",
//     "/opt/nomad/data/alloc/*/alloc/logs/*.stderr.*",
//   ]
//   // Avoid named pipes if you have any in there
//   exclude_patterns = ["/opt/nomad/data/alloc/**/*.fifo"]
// }

// loki.source.file "nomad_alloc_logs" {
//   targets   = discovery.file.nomad_alloc_logs.targets
//   start_at  = "end"
//   // poll_frequency = "5s"

//   pipeline_stages = [
//     // Extract alloc ID and the basename like "telegraf.stdout.0"
//     {
//       regex = {
//         expression = ".*/alloc/([^/]+)/alloc/logs/([^.]+)\\.(stdout|stderr)\\..*"
//       }
//     },
//     {
//       labels = {
//         job     = "${2}"
//         alloc   = "${1}"
//         stream  = "${3}"
//         source  = "nomad"
//       }
//     }
//   ]

//   forward_to = [loki.write.default.receiver]
// }


{% endif %}
